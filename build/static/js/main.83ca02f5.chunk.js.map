{"version":3,"sources":["components/createSurvey/QuestionType.js","components/createSurvey/QuestionMaker.js","components/createSurvey/answers.js","config.js","utility/utility.js","components/createSurvey/CreateSurvey.js","components/takeSurvey/AnswerForTakeSurvey.js","components/takeSurvey/TakeSurvey.js","components/index.js","components/Avatar.js","App.js","serviceWorker.js","index.js"],"names":["QuestionType","props","Modal","size","aria-labelledby","centered","show","status","onHide","onSelect","Header","closeButton","Title","id","Body","DropdownButton","title","event","Dropdown","Item","eventKey","Footer","Button","onClick","Question","InputGroup","className","Prepend","Text","FormControl","placeholder","aria-label","aria-describedby","name","value","qValue","onChange","questionUpdater","Answers","answers","map","e","result","limit","belongsTo","increment","decrement","disabled","i","push","key","Append","variant","data-value","data-set","options","length","questionType","inputCounter","optionRemover","answerUpdater","config","url","imgSrc","util","tmp","JSON","parse","stringify","data","method","path","dataType","axios","headers","Connect","CreateSurvey","state","questions","currentQuestionType","selectedOption","bind","addMoreQuestions","publish","requestMaker","uId","then","val","formId","catch","err","console","error","this","Object","keys","forEach","ele","res","log","isNaN","setState","helper","ind","target","dataset","split","qType","splice","QuestionMaker","question","qNo","Container","Row","Col","md","span","offset","qAndans","to","React","Component","AnswerForTakeSurvey","type","classValue","ListGroup","style","textAlign","cursor","Form","Check","label","checked","statusDecider","Array","isArray","selected","indexOf","TakeSurvey","apiCall","sort","a","b","Alert","fontSize","idealIndex","marginTop","init","exact","height","justifyContent","alignItems","flexDirection","width","Avatar","src","alt","color","App","position","top","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.83ca02f5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Modal, Button, DropdownButton, Dropdown } from \"react-bootstrap\";\n\nfunction QuestionType(props) {\n  return (\n    <Modal\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      show={props.status}\n      onHide={props.onSelect}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Select Question Type\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <DropdownButton\n          size=\"lg\"\n          title=\"Select question\"\n          onSelect={(event) => {\n            props.onSelect(event);\n          }}\n        >\n          <Dropdown.Item eventKey=\"1\">Multi select</Dropdown.Item>\n          <Dropdown.Item eventKey=\"2\">Single select</Dropdown.Item>\n        </DropdownButton>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={props.onSelect}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default QuestionType;\n","import React from \"react\";\nimport { InputGroup, FormControl } from \"react-bootstrap\";\n\nfunction Question(props) {\n  return (\n    <>\n      <InputGroup className=\"mb-5 mt-5\">\n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\">?</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          placeholder=\"Type question here\"\n          aria-label=\"question\"\n          aria-describedby=\"basic-addon1\"\n          name={props.name}\n          value={props.qValue}\n          onChange={(event) => {\n            props.questionUpdater(event);\n          }}\n        />\n      </InputGroup>\n      Options :\n    </>\n  );\n}\n\nexport default Question;\n","import React from \"react\";\nimport { InputGroup, FormControl, Button } from \"react-bootstrap\";\n\nfunction Answers(props) {\n  const show = false;\n  let answers = props.answers.map((e) => e);\n  const limit = show ? 2 : answers.length;\n  let values = props.questionType == 2 ? [\"Yes\", \"No\"] : answers;\n  let result = options(\n    limit,\n    values,\n    props.belongsTo,\n    props.inputCounter,\n    props.optionRemover,\n    props.questionType == 2\n  );\n  return (\n    <div\n      onChange={(event) => {\n        props.answerUpdater(event);\n      }}\n    >\n      {result}\n    </div>\n  );\n}\n\nfunction options(limit, value, belongsTo, increment, decrement, disabled) {\n  let result = [];\n  for (let i = 0; i < limit; ++i)\n    result.push(\n      <InputGroup key={i} className=\"mt-2 mb-2\">\n        <FormControl\n          placeholder=\"Type answer here\"\n          aria-label=\"answers\"\n          aria-describedby=\"basic-addon2\"\n          value={value[i]}\n          name={belongsTo + \"q\" + i}\n        />\n        <InputGroup.Append>\n          <Button\n            variant=\"success\"\n            onClick={increment}\n            data-value={belongsTo + \"q\" + i}\n            disabled={disabled}\n          >\n            +\n          </Button>\n          <Button\n            variant=\"danger\"\n            onClick={decrement}\n            data-set=\"decrement\"\n            data-value={belongsTo + \"q\" + i}\n            disabled={disabled}\n          >\n            -\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n    );\n\n  return result;\n}\n\nexport default Answers;\n","let config = {\n  url:\n    process.env.NODE_ENV === \"development\"\n      ? \"http://localhost:3000/\"\n      : \"http://18.221.148.171:3000/\",\n  imgSrc:\n    \"https://banner2.cleanpng.com/20180418/izw/kisspng-white-tiger-willard-claw-clip-art-wrestling-5ad76518567760.0786027715240655603542.jpg\",\n};\nexport default config;\n","import axios from \"axios\";\nimport Connect from \"../config\";\nconst util = {};\n\nutil.parser = (tmp) => {\n  /**\n   * @input as array\n   * parser is used to convert value into string because while reading the excel data from that\n   * files are received as object that is not able to rendered by react.\n   */\n  let out = tmp.map((e) => JSON.parse(JSON.stringify(e)));\n  return out;\n};\n\nutil.requestMaker = (data, method, path, dataType = \"application/json\") => {\n  /**\n   * @input passing data, http method, endpoint, media type\n   */\n  return axios({\n    method,\n    headers: {\n      \"Content-Type\": dataType,\n    },\n    data,\n    url: Connect.url + path,\n  });\n};\n\nexport default util;\n","import React from \"react\";\nimport { Row, Col, Button, Container } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport QuestionType from \"./QuestionType\";\nimport QuestionMaker from \"./QuestionMaker\";\nimport Answers from \"./answers\";\nimport util from \"../../utility/utility\";\n\nclass CreateSurvey extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [\n        // {\n        //   formId: 1,\n        //   qType: true,\n        //   question: \"\",\n        // },\n      ],\n      answers: [\n        // {\n        //   qNo: 1,\n        //   options: [\"hello\", \"what\"],\n        //   formId: 1,\n        // },\n      ],\n      currentQuestionType: \"\",\n    };\n    this.selectedOption = this.selectedOption.bind(this);\n    this.inputCounter = this.inputCounter.bind(this);\n    this.questionUpdater = this.questionUpdater.bind(this);\n    this.answerUpdater = this.answerUpdater.bind(this);\n    this.optionRemover = this.optionRemover.bind(this);\n    this.addMoreQuestions = this.addMoreQuestions.bind(this);\n    this.publish = this.publish.bind(this);\n  }\n\n  componentDidMount() {\n    util\n      .requestMaker({ uId: 1, name: \"anonymous\" }, \"post\", \"create\")\n      .then((val) => {\n        this.formId = val.data.id;\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  publish() {\n    let tmp = this.state;\n    Object.keys(tmp).forEach((e) => {\n      if (e === \"questions\" || e === \"answers\")\n        tmp[e].forEach((ele, i) => {\n          util\n            .requestMaker(ele, \"post\", e === \"questions\" ? \"set\" : \"setans\")\n            .then((res) => console.log)\n            .catch((err) => {\n              console.error(err);\n            });\n        });\n    });\n  }\n\n  selectedOption(event) {\n    if (isNaN(event)) {\n      this.setState({\n        currentQuestionType: true,\n      });\n      return;\n    }\n    this.questionType = event;\n    this.setState(\n      {\n        currentQuestionType: true,\n      },\n      () => this.helper(event)\n    );\n  }\n\n  inputCounter(event) {\n    let ind = event.target.dataset.value.split(\"q\");\n    if (this.state.questions[ind[0]].qType == 2) return;\n    if (this.state.answers[ind[0]].options.length >= 4) return;\n    let tmp = [...this.state.answers];\n    tmp[ind[0]].options.splice(+ind[1] + 1, 0, \"\");\n    this.setState({\n      answers: [...tmp],\n    });\n  }\n\n  qAndans() {\n    return this.state.questions.map((e, i) => (\n      <>\n        <QuestionMaker\n          qValue={this.state.questions[i].question}\n          questionUpdater={this.questionUpdater}\n          name={i}\n        />\n        <Answers\n          questionType={this.state.questions[i].qType}\n          answers={this.state.answers[i].options}\n          inputCounter={this.inputCounter}\n          answerUpdater={this.answerUpdater}\n          key={i}\n          belongsTo={i}\n          optionRemover={this.optionRemover}\n        />\n      </>\n    ));\n  }\n\n  questionUpdater(event) {\n    let value = event.target.value;\n    let tmp = this.state.questions;\n    tmp[+event.target.name].question = value;\n\n    this.setState({\n      questions: [...tmp],\n    });\n  }\n\n  answerUpdater(event) {\n    let tmp = [...this.state.answers];\n    let ind = event.target.name.split(\"q\");\n    tmp[ind[0]].options[ind[1]] = event.target.value;\n    this.setState({\n      answers: [...tmp],\n    });\n  }\n\n  optionRemover(event) {\n    let ind = event.target.dataset.value.split(\"q\");\n    if (this.state.questions[ind[0]].qType == 2) return;\n    let tmp = [...this.state.answers];\n    tmp[ind[0]].options.splice(ind[1], 1);\n    this.setState({\n      answers: [...tmp],\n    });\n  }\n\n  addMoreQuestions() {\n    this.setState({\n      currentQuestionType: false,\n    });\n  }\n\n  helper(qType) {\n    let tmp = this.state;\n    if (this.questionType) {\n      tmp.questions.push({\n        formId: this.formId,\n        qType,\n        question: \"\",\n        qNo: tmp.questions.length,\n      });\n      tmp.answers.push({\n        qNo: tmp.questions.length - 1,\n        options: this.questionType == 1 ? [\"\"] : [\"yes\", \"no\"],\n        formId: this.formId,\n      });\n      this.setState({\n        ...tmp,\n      });\n    }\n  }\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 6, offset: 3 }}>\n            {!this.state.currentQuestionType && (\n              <QuestionType\n                onSelect={this.selectedOption}\n                status={!this.state.currentQuestionType}\n              />\n            )}\n            {this.qAndans()}\n            {this.state.questions.length && (\n              <>\n                <Button\n                  variant=\"primary\"\n                  className=\"mr-5\"\n                  onClick={this.addMoreQuestions}\n                >\n                  Add Question\n                </Button>\n                <Link to=\"/\">\n                  <Button variant=\"success\" onClick={this.publish}>\n                    Publish\n                  </Button>\n                </Link>\n              </>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default CreateSurvey;\n","import React from \"react\";\nimport { ListGroup, Form } from \"react-bootstrap\";\n\nfunction AnswerForTakeSurvey(props) {\n  let type = [\"checkbox\", \"radio\"];\n  type = type[+props.questionType === 2 ? 1 : 0];\n  // let color = +props.questionType !== 2 ? \"#df6504\" : \"#160405\";\n  let classValue = +props.questionType !== 2 ? \"\" : \"mb-3 twoOptions\";\n  let res = props.answers.map((e, i) => {\n    return (\n      <ListGroup.Item\n        style={{\n          textAlign: \"left\",\n          // backgroundColor: \"#df6504\",\n          cursor: \"pointer\",\n        }}\n        variant={+props.questionType !== 2 ? \"secondary\" : \"info\"}\n        className=\"mb-3\"\n        onClick={() => {\n          props.answerUpdater(i, props.belongsTo);\n        }}\n        key={i}\n      >\n        <Form.Check\n          type={type}\n          id={e + i}\n          label={e}\n          checked={statusDecider(i)}\n          key={i}\n        />\n      </ListGroup.Item>\n    );\n  });\n  return <ListGroup className={classValue}>{res}</ListGroup>;\n\n  function statusDecider(i) {\n    if (Array.isArray(props.selected)) return props.selected.indexOf(i) !== -1;\n    return props.selected === i;\n  }\n}\n\nexport default AnswerForTakeSurvey;\n","import React from \"react\";\nimport { Row, Col, Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Answers from \"./AnswerForTakeSurvey\";\nimport util from \"../../utility/utility\";\nimport \"./takeSurvey.css\";\n\nclass TakeSurvey extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [],\n      answers: [],\n      selected: [],\n    };\n    this.answerUpdater = this.answerUpdater.bind(this);\n    this.publish = this.publish.bind(this);\n    this.apiCall = this.apiCall.bind(this);\n  }\n\n  componentDidMount() {\n    this.apiCall();\n  }\n\n  apiCall() {\n    util\n      .requestMaker(\"\", \"get\", \"get\")\n      .then((val) => {\n        this.setState({\n          questions: val.data.questions.sort((a, b) => a.qNo - b.qNo),\n          answers: val.data.answers.sort((a, b) => a.qNo - b.qNo),\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  publish() {\n    let tmp = { ...this.state };\n    let answers = tmp.answers;\n    tmp.selected.forEach((options, i) => {\n      options = Array.isArray(options) ? options : [options];\n      util\n        .requestMaker(\n          { qNo: answers[i].qNo, options, formId: answers[i].formId },\n          \"post\",\n          \"userinput\"\n        )\n        .then((res) => console.log)\n        .catch((err) => {\n          console.error(err);\n        });\n    });\n  }\n\n  qAndans() {\n    return this.state.questions.map((e, i) => (\n      <Row key={\"r\" + i}>\n        <Col md={{ span: 6, offset: 3 }}>\n          <Alert\n            variant=\"primary\"\n            style={{ textAlign: \"left\", fontSize: \"1.5em\" }}\n            key={\"q\" + i}\n          >\n            {i + 1}) {this.state.questions[i].question}\n          </Alert>\n\n          <Answers\n            questionType={this.state.questions[i].qType}\n            answers={this.state.answers[i].options}\n            answerUpdater={this.answerUpdater}\n            key={i}\n            belongsTo={i}\n            selected={this.state.selected[i]}\n          />\n        </Col>\n      </Row>\n    ));\n  }\n\n  answerUpdater(idealIndex, ind) {\n    let tmp = [...this.state.selected];\n    if (this.state.questions[ind].qType === 2) tmp[ind] = idealIndex;\n    else if (Array.isArray(tmp[ind])) {\n      tmp[ind].indexOf(idealIndex) !== -1\n        ? tmp[ind].splice(tmp[ind].indexOf(idealIndex), 1)\n        : tmp[ind].push(idealIndex);\n    } else if (tmp[ind] === idealIndex) tmp[idealIndex] = \"\";\n    else {\n      tmp[ind] = [];\n      tmp[ind].push(idealIndex);\n    }\n    this.setState({\n      selected: [...tmp],\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ marginTop: \"10px\" }}>\n        {this.qAndans()}\n        <Link to=\"/\">\n          <Button onClick={this.publish}>Submit </Button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default TakeSurvey;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport CreateSurvey from \"./createSurvey/CreateSurvey\";\nimport TakeSurvey from \"./takeSurvey/TakeSurvey\";\n\nfunction init() {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <div\n              className=\"parent\"\n              style={{\n                height: \"70vh\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n              }}\n            >\n              <Link to=\"/create\">\n                <div className=\"m-5\">\n                  <Button variant=\"success\">Create survey</Button>\n                </div>\n              </Link>\n              <Link to=\"/take\">\n                <Button variant=\"success\" style={{ width: \"105%\" }}>\n                  Take survey\n                </Button>\n              </Link>\n            </div>\n          </Route>\n          <Route path=\"/create\">\n            <CreateSurvey />\n          </Route>\n          <Route path=\"/take\">\n            <TakeSurvey />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default init;\n","import React from \"react\";\n\nfunction Avatar(props) {\n  return (\n    <div>\n      <img\n        src={props.url}\n        alt=\"Tiger face\"\n        style={{ width: \"5em\", height: \"5rem\", color: \"orange\" }}\n        title=\"Tiger survey page\"\n      />\n    </div>\n  );\n}\n\nexport default Avatar;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Init from \"./components/index\";\nimport config from \"./config\";\nimport Avatar from \"./components/Avatar\";\nimport CreateSurvey from \"./components/createSurvey/CreateSurvey\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport TakeSurvey from \"./components/takeSurvey/TakeSurvey\";\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ position: \"relative\", top: \"2vh\" }}>\n      {/* <Link to=\"/\"> */}\n      <Avatar url={config.imgSrc} />\n      {/* </Link> */}\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Init />\n          </Route>\n          <Route path=\"/create\">\n            <CreateSurvey />\n          </Route>\n          <Route path=\"/take\">\n            <TakeSurvey />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}